library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


ENTITY Joypad IS 

	PORT(
		VGAClk:				IN STD_LOGIC;
		ButtonIn: 			IN STD_LOGIC_VECTOR (3 DOWNTO 0); --1000=down 0100=right 0010=left 0001=up
		MovementstateIn:	OUT STD_LOGIC_VECTOR (1 DOWNTO 0)
	);
END Joypad;

	
PROCESS(VGAClk)
	variable Old_Button : std_logic_vector(3 downto 0) := (others => '0');
   variable MovementstateNext : std_logic_vector(1 downto 0) := (others => '0');
	BEGIN
	IF(VGAClk'EVENT AND VGAClk='1')THEN
------------------------------------------------------------------------------------------
-- Setting the Movementstate by the ButtonIn Input
		IF(ButtonIn(0) = '1' AND Old_Button(0) = '1')THEN
			MovementstateNext := "00"; --down
		ELSIF(ButtonIn(1) = '1' AND Old_Button(1) = '1')THEN
			MovementstateNext := "01"; --right
		ELSIF(ButtonIn(2) = '1' AND Old_Button(2) = '1')THEN
			MovementstateNext := "10"; --left
		ELSIF(ButtonIn(3) = '1' AND Old_Button(3) = '1')THEN
			MovementstateNext := "11"; --up
		END IF;
		Old_Button := ButtonIn;
	END IF;
   MovementstateIn <= MovementstateNext;	
END PROCESS;

	
--	entity joypad is
--    port(
--        clk_60hz    : in std_logic;
--        button      : in std_logic_vector(4 downto 0);
--        stop        : out std_logic;
--        direction   : out std_logic_vector(1 downto 0));
--end entity;
--
--architecture main of joypad is
--begin
--    process(clk_60hz)
--        --button in "up right down left stop" direction
--        variable old_button : std_logic_vector(4 downto 0) := (others => '0');
--        variable stop_next : std_logic := '0';
--        variable direction_next : std_logic_vector(1 downto 0) := (others => '0');
--    begin
--        if (rising_edge(clk_60hz)) then
--            if (old_button(0) = '0' and button(0) = '1') then
--                direction_next := "00"; --up
--            end if;
--            if (old_button(1) = '0' and button(1) = '1') then
--                direction_next := "01"; --right
--            end if;
--            if (old_button(2) = '0' and button(2) = '1') then
--                direction_next := "10"; --down
--            end if;
--            if (old_button(3) = '0' and button(3) = '1') then
--                direction_next := "11"; --left
--            end if;
--            if (old_button(4) = '0' and button(4) = '1') then
--                stop_next := not stop_next;     --stop
--            end if;
--            old_button := button;
--        end if;
--        stop <= stop_next;
--        direction <= direction_next;
--    end process;
--end architecture;